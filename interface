//-----------------------------Laboratorio Digital--------------------------------------
// Arquivo: sonar_processing_2024.pde
// Projeto: Experiencia 5 - Sistema de Sonar
//--------------------------------------------------------------------------------------
// Descricao:
//            sketch processing: interface para radar com sensor ultrassônico
// 
//            baseado em código disponível no site:
//            http://howtomechatronics.com/projects/arduino-radar/
//
//--------------------------------------------------------------------------------------
// Revisoes:
//     Data        Versao  Autor             Descricao
//     28/10/2015  1.0     Edson Midorikawa  adaptacao inicial do sketch
//     21/10/2019  2.0     Edson Midorikawa  configuracao da interface serial
//     08/10/2021  3.0     Edson Midorikawa  adaptado para MQTT
//     13/10/2021  3.1     Edson Midorikawa  ajustado para configuração de credenciais
//     03/10/2022  4.0     Edson Midorikawa  revisado e readaptado para interface serial
//     10/10/2023  4.1     Edson Midorikawa  revisão do código
//     19/09/2024  4.2     Edson Midorikawa  revisão do código
//--------------------------------------------------------------------------------------
//

// bibliotecas
import processing.serial.*;      // importa biblioteca de comunicacao serial
import java.awt.event.KeyEvent;  // importa biblioteca para leitura de dados da porta serial
import java.io.IOException;
import javax.swing.JButton;

// interface serial
Serial myPort; // definicao do objeto serial

//  ======= CONFIGURACAO SERIAL ==================

    String   porta= "COM26";  // <== acertar valor ***
    int   baudrate= 115200;  // 115200 bauds
    char    parity= 'O';     // E=even/par, O=odd/impar
    int   databits= 7;       // 7 bits de dados
    float stopbits= 1.0;     // 1 stop bit

//  ==============================================

// variaveis
String medida_rio="";
String comporta="";
String bomba="";
String medida_res="";
String erro_medida="";
String erro_comporta="";

String data="";
String noObject;
float  pixsDistance;
int    imedida_rio, icomporta, ibomba, imedida_res, ierro_medida, ierro_comporta;
int    index1=0;
int    index2=0;
PFont  orcFont;
int    buttonX;
int    buttonY;
int    buttonSize = 90;
color  buttonColor;
color  currentColor = color(90);
boolean buttonOver = false;

// keystroke
int whichKey = -1;  // variavel mantem tecla acionada


// ========================================================================
// funcao setup()
// ========================================================================
void setup() {
    size (960, 600);
    //translate(0,20); 
    smooth();
    
    orcFont = loadFont("OCRAExtended-24.vlw");
    buttonX = width/2-buttonSize-190;
    buttonY = height/2-buttonSize/2;
    buttonColor = color(#FF0000);

    // interface serial
    //myPort = new Serial(this, porta, baudrate, parity, databits, stopbits);  // inicia comunicacao serial 
    // leitura de dados da porta serial até o caractere '#' (para leitura de "angulo,distancia#"
    //myPort.bufferUntil('#'); 

}

// ========================================================================
// funcao draw
// ========================================================================
void draw() {
    pushMatrix();
    update(mouseX, mouseY);
    background(currentColor);
    translate(0,40);
    fill(98,245,31);
    textFont(orcFont);
    noStroke();
    fill(0,7);
    rect(0, -40, width, 480+40);

    
    //fill(98,245,31); // verde

    // chama funcoes para desenhar o sonar
    drawRadar();
    drawLine();
    //drawButton();
    drawText();
    popMatrix();
}

// funcao drawRadar()
void drawRadar() {
    pushMatrix();
    //
    fill(255,255,255);
    textSize(28);
    text("AquaControl", 10, 0);
    text("Sistema de Controle de Enchentes", 10, 40);
    //
    translate(480,480);
    noFill();
  
    strokeWeight(1.5);
    stroke(98,245,31);
    // arcos
    //arc(0,0,800,800,PI,TWO_PI);
    //arc(0,0,600,600,PI,TWO_PI);
    //arc(0,0,400,400,PI,TWO_PI);
    //arc(0,0,200,200,PI,TWO_PI);

    // desenha segmentos radiais
    //line(-480,0,480,0);
    //line(0,0,-480*cos(radians(30)),-480*sin(radians(30)));
    //line(0,0,-480*cos(radians(60)),-480*sin(radians(60)));
    //line(0,0,-480*cos(radians(90)),-480*sin(radians(90)));
    //line(0,0,-480*cos(radians(120)),-480*sin(radians(120)));
    //line(0,0,-480*cos(radians(150)),-480*sin(radians(150)));
    //line(-480*cos(radians(30)),0,480,0);
    popMatrix();
}

// funcao drawObject()
void drawObject() {
    pushMatrix();
    translate(480,480);
    strokeWeight(15); 
    stroke(100,10,10); // vermelho
    // calcula distancia em pixels
    pixsDistance = imedida_res*10.0; 
    // limita faixa de apresentacao
    if(imedida_res < 50) {
        // desenha objeto        
        point(pixsDistance*cos(radians(imedida_rio)),-pixsDistance*sin(radians(imedida_rio)));
    }
    popMatrix();
}   

// funcao drawButton()
void drawButton() {
    pushMatrix();
    stroke(#180809); // vermelho
    fill(#180809);
    rect(buttonX, buttonY, buttonSize, buttonSize);
    popMatrix();
}   

// funcao drawLine()
void drawLine() {
    pushMatrix();
    strokeWeight(10);
    stroke(30,250,60);
    translate(480,480);
    // desenha linha do sonar
    //line(0,0,470*cos(radians(imedida_rio)),-470*sin(radians(imedida_rio)));
    popMatrix();
}

// funcao drawText()
void drawText() {
  
    pushMatrix();
    // limita detecao de objetos a 100 cm
    if(icomporta == 0) {
        noObject = "Seguro";
    }
    
    if(icomporta == 1) {
        noObject = "Emergência";
    }
    fill(0,0,0);
    noStroke();
    rect(0, 481, width, 540);
    if(icomporta == 0) {
        fill(98,245,31);
    }

    if(icomporta == 1) {
        fill(#fb0411);
    }
    textSize(20);
    // imprime dados do sonar
    text("Modo: " + noObject, 40, 525);
    text("Altura do rio: " + imedida_rio + " cm", 280, 525);
    text("Altura do reservatório: " + imedida_res + " cm", 580, 525);
    //if(imedida_res<50) {
    //    text("          " + imedida_res +" cm", 700, 525);
    //}
    //else {
    //    text("          ---", 700, 525);  
    //}
    popMatrix(); 
}

boolean overRect(int x, int y, int width, int height)  {
  if (mouseX >= x && mouseX <= x+width && 
      mouseY >= y && mouseY <= y+height) {
    return true;
  } else {
    return false;
  }
}

void update(int x, int y) {
  if ( overRect(buttonX, buttonY, buttonSize, buttonSize) ) {
    buttonOver = true;
  } else {
    buttonOver = false;
  }
}

void mousePressed() {

  //if (buttonOver) {
  //  currentColor = buttonColor;
  //}
}

// ========================================================================
// funcoes para conexao com a porta serial
// ========================================================================

void serialEvent (Serial myPort) { 
    // inicia leitura da porta serial
    try {
        // leitura de dados da porta serial ate o caractere '#' na variavel data
        data = myPort.readStringUntil('#');
        //data = "120,10,150,00#";

        print(data);  // imprime "data" (debug)
        // remove caractere final '#'
        data = data.substring(0,data.length()-1); 
        // encontra indice do caractere ',' e guarda em "index1" 
        index1   = data.indexOf(",");
        // le dados da posicao 0 ate a posicao index1 e guarda em "medida_rio"
        medida_rio    = data.substring(0, index1);
        // le dado da posicao "index1+1" e guarda em "comporta"
        comporta = data.substring(index1+1, index1+2);
        // le dado da posicao "index1+2" e guarda em "bomba"
        bomba = data.substring(index1+2, index1+3);
        // le dados da posicao "index1+4" ate a posicao index1 e guarda em "medida_res"
        medida_res    = data.substring(index1 + 4, index1 + 7);
         // le dado da posicao "index1+8" e guarda em "erro_medida"
        erro_medida = data.substring(index1+8, index1+9);
        // le dado da posicao "index1+9" e guarda em "erro_comporta"
        erro_comporta = data.substring(index1+9, index1+10);
        println(" -> medida_rio= " + medida_rio + " comporta= " + comporta + " bomba= " + bomba + " medida_res= " + medida_res + " erro_medida= " + erro_medida
        + " erro_comporta= " + erro_comporta);

        // converte variaveis tipo String para tipo inteiro
        imedida_rio    =    int(medida_rio);    // angulo em graus
        icomporta      =    int(comporta);
        ibomba         =    int(bomba); 
        imedida_res    =    int(medida_res);
        ierro_medida   =    int(erro_medida); 
        ierro_comporta =    int(erro_comporta); 


        println(" -> medida_rio= " + imedida_rio + " cm" + " comporta= " + icomporta + " bomba= " + ibomba + " medida_res= " + imedida_res + " cm" + " erro_medida= " + ierro_medida
        + " erro_comporta= " + ierro_comporta);
    }
    catch(RuntimeException e) {
        e.printStackTrace();
    }
}

// funcao keyPressed
// processa tecla acionada (envia para a porta serial)
void keyPressed() {
    whichKey = key;

    myPort.write(key);
    println("");
    println("Enviando tecla '" + key + "' para a porta serial. ");
}
